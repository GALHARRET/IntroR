1 + 1
pi
sin(0)
sin(3*pi/2)
x=2
print(x)
mode(x)
## Supprimer x
rm(x)
x<-"bonjour"
print(x)
mode(x)
x<-TRUE
print(x)
mode(x)
a1<-c(1.5,2,3.2,-1.5,0,-1)
a2<-c("fille","garçon","fille","fille","fille","fille")
a3<-c(TRUE,FALSE,TRUE,TRUE)
class(a1)
class(a2)
class(a3)
#| code-fold: true
#| code-summary: "Voir la correction"
a<-c(a1,a2)
class(a)
rep(5,10)
rep("fille",10)
seq(0,1,by=0.1)
seq(10,20,by=5)
length(a1)
length(a2)
a1[1]
a1[3]
# Opérations sur les éléments d'un vecteur
a1[1]+a1[3]
a1[1]/a1[3]
a1[3]<- -3
a1
a1[12]<-10
a1[13]<-11
a1<-seq(10,20,by=1)
a2<-seq(20,30,by=1)
a1+a2
a2-a1
a1*a2
a2/a1
a1^2*log(a2)
?sample
sample(-10:10,1)
sample(-10:10,3)
set.seed("44")
x=sample(-20:20,40,T)
sum(x>0)
which(x>0)
which(x>5 | x<0)
which(x>=5 & x<=10)
#| code-fold: true
#| code-summary: "Voir la correction"
x<-c("Nantes", "Brest", "Rennes", "Angers","Le Mans")
#| code-fold: true
#| code-summary: "Voir la correction"
x[1]
#| code-fold: true
#| code-summary: "Voir la correction"
x[-1]
#| code-fold: true
#| code-summary: "Voir la correction"
x[1:3]
#| code-fold: true
#| code-summary: "Voir la correction"
x[c(2,4)]
#| code-fold: true
#| code-summary: "Voir la correction"
sort(x)
rev(sort(x))
#| code-fold: true
#| code-summary: "Voir la correction"
y<-seq(2,100,by=2)
#| code-fold: true
#| code-summary: "Voir la correction"
z<-seq(1,100,2)
S<-y+z
#| code-fold: true
#| code-summary: "Voir la correction"
length(x)
#| code-fold: true
#| code-summary: "Voir la correction"
sonette<-c(rep("ding",4),rep("dong",4))
#| code-fold: true
#| code-summary: "Voir la correction"
melodie<-sample(c("ding","dong"),100,replace=T)
#| code-fold: true
#| code-summary: "Voir la correction"
table(melodie)
#| code-fold: true
#| code-summary: "Voir la correction"
x<-rnorm(100)
#| code-fold: true
#| code-summary: "Voir la correction"
sum(x)
mean(x)
#| code-fold: true
#| code-summary: "Voir la correction"
quantile(x)
#| code-fold: true
#| code-summary: "Voir la correction"
y<-(x>0)
#| code-fold: true
#| code-summary: "Voir la correction"
(x< -1)|(x>1)
#| code-fold: true
#| code-summary: "Voir la correction"
which(x<0)
#| code-fold: true
#| code-summary: "Voir la correction"
abs(x)
#| code-fold: true
#| code-summary: "Voir la correction"
floor(x)
#| code-fold: true
#| code-summary: "Voir la correction"
x[x>0]
#| code-fold: true
#| code-summary: "Voir la correction"
x[x>0]<-0
x
A=matrix(c(1,2,3,
2,1,-1,
-3,-1,1),nrow=3)
dim(A)
A[1,2]
# première ligne de A
A[1,]
# première colonne de A
A[,1]
#| code-fold: true
#| code-summary: "Voir la correction"
fillmat<-runif(250,0,10)
#| code-fold: true
#| code-summary: "Voir la correction"
Mesures<-matrix(fillmat,nrow=50)
colnames(Mesures)<-paste("Mesure",1:5,sep="")
M=max(vecAlea)
x<-runif(1,-10,10)
if(x>0){print(paste("La valeur",round(x,1),"est positive",sep=" "))}
x<-runif(1,-10,10)
if(x>0){
print(paste("La valeur",round(x,1),"est positive",sep=" "))}else{
print(paste("La valeur",round(x,1),"est négative",sep=" "))}
x<-runif(1,0,10)
y<-runif(1,0,10)
if(x<y){z<-x+1}else if(x>5 & y>5){z<-x+2}else{z<-x}
print(paste("x=",x,"y=",y,"z=",z))
n<-100
x<-0
for(i in 1:n){x<-x+i}
print(x)
n<-100
x<-0
impairs<-seq(1,n,2)
for(i in impairs){x<-x+i}
print(x)
n<-10
y=x=0
for(i in 1:n){
a<-runif(1,0,1)
if(a>0.5){y<-y+1}else{x<-x+1}
}
if(y>x){print("Gagnant")}else{print("Perdant")}
i<-1
while (i<10){
print(i)
i=i+1}
#| code-fold: true
#| code-summary: "Voir la correction"
vecAlea<-sample(1:100,100,T)
IND<-c()
for(i in 1:100){
if(vecAlea[i]>50){IND<-c(IND,i)}
}
IND<-which(vecAlea>50)
VEC<-vecAlea[IND]
M=max(vecAlea)
M
vecAlea
n=0
length(vecAlea)
for(i in 1:length(vecAlea)){
if(vecAlea[i]==M){n=n+1}
}
n
length(which(vecAlea==M))
vecPM5<-c()
for(i in 1:100){
if(i/5-floor(i/5)!=0){VecPM5<-c(VecPM5,i)}
}
VecPM5<-c()
for(i in 1:100){
if(i/5-floor(i/5)!=0){VecPM5<-c(VecPM5,i)}
}
VecPM5
