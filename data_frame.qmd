# Les data frames

C'est l'objet le plus important et le plus utilisé dans R il s'agit d'un tableau de données mais contrairement aux matrices on peut avoir différents types de données dans un dataframe.

## Création d'un data frame

On crée deux variables x et y contenant $n=100$ nombres distribués selon une loi uniforme continue sur \[0,20\] (fonction runif) et une variable gr (expliquer le résultat du code correspondant). La fonction ***round*** permet d'arrondir.

```{r echo=TRUE}
x<-round(runif(100,0,20),1)
y<-round(runif(100,0,20),1)
gr<-sample(c("ING1","ING2"),size=100,replace=T,prob=c(0.6,0.4))
df<-data.frame(NoteF=x,NoteM=y,gr=gr)
```

L'indexation des éléments dans un data-frame est la même que dans une matrice :

```{r echo=TRUE}
df[1,1]
```

On peut également sélectionner une colonne du data frame via \$

```{r echo=TRUE}
df$NoteF
```

## Les fonctions utiles pour les data frame

### summary

Cette fonction permet de résumer l'ensemble des variables du data frame.

```{r echo=TRUE}
summary(df)
```

### apply

La fonction apply permet d'appliquer une fonction sur les lignes (1) ou les colonnes d'un data frame : par exemple si on souhaite appliquer la fonction moyenne (***mean***) sur les colonnes du data frame df on utilise :

```{r echo=TRUE}
apply(df[,1:2],2,mean)
```

Remarque : on n'a utilisé que les deux premières colonnes du data frame car la troisième n'est pas numérique (donc on ne peut pas calculer sa moyenne).

## Importation d'un data frame inclus dans un package

Pour accéder aux data frames de R :

```{r echo=TRUE}
data()
```

ensuite on peut grâce à la fonction help obtenir de l'aide sur l'un des data frame :

```{r echo=TRUE}
help("mtcars")
```

Ensuite on charge le jeu de données via

```{r echo=TRUE}
data("mtcars")
```

Une fois le data frame importé on constate qu'il est présent dans la fenêtre environnement

![Fenêtre environnement](TD1_files/fig2.png)

# Fonction factor()

Cette fonction va être très importante pour la suite et en particulier lorsque l'on va manipuler des jeux de donnnées en statistique.

Un ***facteur*** est une variable qualitative. Les valeurs prises par cette variable sont appelées ***modalités***. Il peut arriver que ces modalités soient codées. Par exemple dans certains jeux de données on connaîtra le statut professionnel des participants (modalités : en activité, en recherche d'emploi, étudiant, à la retraite) mais on peut avoir choisi de coder les modalités par des nombres (ici de 1 à 4) mais cette variable demeure un facteur.

Dans R :

```{r echo=T,eval=T}
statut_pro<-sample(1:4,100,replace=T)
## R ne voit pas qu'il s'agit d'un facteur car les modalités sont numériques
class(statut_pro)
table(statut_pro)
```

On utilise la fonction factor pour dire à R qu'il s'agit d'une variable qualitative. On voit le changement à travers class ou levels :

```{r echo=T,eval=T}
statut_pro<-factor(statut_pro)
class(statut_pro)
levels(statut_pro)

```

On peut renommer les niveaux du facteur via la fonction ***levels()***

```{r}
levels(statut_pro)<-c("en activité", "en recherche d'emploi","étudiant", "à la retraite")
table(statut_pro)
```

***Remarque :*** Les variables binaires (facteurs à deux modalités) sont souvent codées 0/1.

On peut être amené à vouloir avoir les modalités d'un facteur classées dans un certain ordre pour ce faire on va utiliser la fonction levels avec l'ordre choisi :

```{r echo=T, eval=T}
statut_pro<-factor(statut_pro,levels=c("étudiant","en activité","en recherche d'emploi","à la retraite"))
table(statut_pro)
```

***Attention*** les levels doivent être exactement écrits de la même façon que les levels si les modalités sont déjà écrites et sinon on peut directement agir sur les modalités via labels :

## Fusion de plusieurs catégories

```{r}
statut_pro=replace(statut_pro,statut_pro %in% c("étudiant",
                                     "en activité"),"en activité")
table(statut_pro)
```

Le problème est que la catégorie étudiant existe encore donc il faut que R "l'oublie".

## Oubli de niveaux

```{r}
statut_pro=droplevels(statut_pro)
table(statut_pro)
```

## Importation d'une base de données externe

On peut utiliser une interface graphique pour ouvrir les fichiers contenant le data frame. Les plus courants sont :

-   \*.csv : (Comma Separed Values) ce sont des fichiers de type tableaux sans mise en forme
-   \*.xlsx : fichiers produits à partir du logiciel excel
-   \*.ods : fichiers produits à partir du logiciel Calc de LibreOffice.

![Menu Importer](TD1_files/fig3.png){width="250"}

On va importer le data frame contenu dans le fichier bordeaux.csv disponible sur Connect (vous devez le télécharger).

Vous avez deux solutions : ***From text (base)***

![Importation avec la librairie base](TD1_files/fig4-0.png){width="100%"}

***From text (readr)***

![Importation avec la librairie readr](TD1_files/fig4.png){height="75%"}

Ensuite il est recommandé de copier/coller la ligne de commande dans le script R afin de pas à avoir à reproduire la manipulation à chaque session de travail sur le fichier bordeaux.csv

![La fonction read_csv()](TD1_files/fig5.png)

## Exercice sur le data frame iris

1.  Charger le fichier de données iris. Lire l'aide de iris pour comprendre le jeu de données.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
data("iris")
help("iris")
```

2.  Quel est le type de iris ? Quelles sont les dimensions de iris ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
class(iris)
dim(iris)
```

3.  Appliquer la fonction str à iris. A quoi correspondent les informations renvoyées ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
str(iris)
```

4.  Appliquer la fonction summary à iris. A quoi correspondent les informations renvoyées ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
summary(iris)
```

5.  Utiliser les fonctions colnames() et rownames(). Quelles sont les informations renvoyées ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
rownames(iris)
# Le nom des lignes de iris
colnames(iris)
# Le nom des colonnes de iris
```

6.  A l'aide la fonction de texte paste remplacer le nom des lignes par fleur 1, ..., fleur 150.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
rownames(iris)<-paste("fleur",1:150,sep=" ")
```

7.  Pour un data frame on peut appeler une colonne par son nom en utilisant \$ : iris\$Sepal.Length. En utilisant cette information donner la classe de la colonne Species.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
class(iris$Species)
```

8.  Quels sont les niveaux du facteur "Species" (fonction levels) ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
levels(iris$Species)
```

9.  Créer une nouvelle colonne nommée groupe (on pensera à \$) dans le data frame iris identique à la colonne Species. Quelle est la classe de cette nouvelle colonne ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
iris$groupe=iris$Species
class(iris$groupe)
```

10. Renommer les niveaux de la colonne groupe en A, B, C (A pour setosa, B pour versicolor, C pour virginica). Afficher les indices des lignes de iris correspondant au groupe B.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
levels(iris$groupe)=c("A","B","C")
which(iris$groupe=="B")
```

11. Créer l'ensemble des numéros de lignes correspondantes aux fleurs du groupe A. Afficher les lignes de iris correspondant au groupe A. Proposer une solution alternative.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
I=which(iris$groupe=="A")
iris[I,]
iris[iris$groupe=="A",]
```

12. En adoptant la même logique que la question précédente, afficher uniquement les lignes de iris où « Sepal.Length » est inférieur à 5.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
iris[iris$Sepal.Length<=5,]
```

13. Combien y a-t-il d'individus ayant la longueur des sépales inférieure à 5 ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
sum(iris$Sepal.Length<=5)
```

## Exercice sur le data frame mtcars

1.  Charger le data frame mtcars. Combien de véhicules et de caractéristiques sur les véhicules sont contenus dans le data frame ?

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
data("mtcars")
help("mtcars")
dim(mtcars)
```

2.  Deux caractéristiques sont mal identifiées dans le data frame car ce sont des variables qualitatives (facteurs), rectifier en utilisant la fonction as.factor.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
str(mtcars)
mtcars$vs=as.factor(mtcars$vs)
mtcars$am=as.factor(mtcars$am)
```

3.  En utilisant l'aide du data frame mtcars renommer les niveaux des deux facteurs précédents.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
levels(mtcars$vs)=c("V","droit")
levels(mtcars$am)=c("Auto","Manu")
```

4.  Etablir la table de contingence de ces deux facteurs (fonction table)

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
table(mtcars$vs,mtcars$am)
```

5.  Calculer la moyenne des 7 premières variables (on utilisera les fonctions mean et apply).

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
apply(mtcars[,1:7],2,mean)
```

6.  Reprendre la question pour les voitures avec un moteur à plat. De même pour les voitures ayant un moteur en V et qui sont automatiques.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
apply(mtcars[mtcars$vs=="V",1:7],2,mean)
apply(mtcars[mtcars$vs=="droit" & mtcars$am=="Auto",1:7],2,mean)
```

7.  Calculer le nombre de voitures ayant un moteur en V qui ont au moins 3 carburateurs.

```{r eval=F}
#| code-fold: true
#| code-summary: "Voir la correction"
sum(mtcars$vs=="V" & mtcars$carb>=3)
```
