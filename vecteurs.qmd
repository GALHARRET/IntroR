# Découverte de R

Dans la console exécuter les lignes suivantes :

```{r echo=TRUE}
1 + 1
pi
sin(0)
sin(3*pi/2)
```

A partir de maintenant toutes les commandes seront enregistrées dans un fichier script que vous nommerez TD1.R Pour ce faire : File -\> New File -\> R Script

La plupart des fonctions mathématiques sont définies dans R (library base)

## Les variables

Une variable est un objet référencé dans le programme qui associe un identificateur à une valeur d'un certain type.

-   ***L'identificateur*** est le nom de la variable utilisé pour l'appeler,
-   ***La valeur*** est ce que contient la variable,
-   ***Le type*** est l'ensemble dans lequel la variable prend sa valeur.

```{r echo=TRUE}
x=2
print(x)
mode(x)
## Supprimer x
rm(x)
```

Les variables contenant des caractères (on utilise "")

```{r echo=TRUE}
x<-"bonjour"
print(x)
mode(x)
```

Les variables contenant des booléens (vrai ou faux)

```{r echo=TRUE}
x<-TRUE
print(x)
mode(x)
```

## Les vecteurs

-   Un des objets de base de R
-   toutes les valeurs de même type (nombre, chaine de caractères, booléen)
-   création via la fonction c() \[combine\].

```{r echo=TRUE}
a1<-c(1.5,2,3.2,-1.5,0,-1)
a2<-c("fille","garçon","fille","fille","fille","fille")
a3<-c(TRUE,FALSE,TRUE,TRUE)
```

On peut déterminer la nature du vecteur en utilisant class() :

```{r echo=TRUE}
class(a1)
class(a2)
class(a3)
```

***Exercice :***

1)  Combiner les vecteurs a1 et a2 dans un nouveau vecteur a.

2)  Quelle est la classe du résultat ?

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
a<-c(a1,a2)
class(a)
```

-   ***rep*** permet d'écrire n fois la valeur a : rep(a,n)

***Exercice :*** créer un vecteur avec 5 fois fille et 10 fois garçon.

```{r}
rep(5,10)
rep("fille",10)
```

-   ***seq*** définit une séquence de nombre entre MIN et MAX avec un pas de L : seq(MIN,MAX,by=L)

```{r}
seq(0,1,by=0.1)
seq(10,20,by=5)
```

### Indexation et longueur d'un vecteur

La fonction length() permet de calculer le nombre de valeurs d'un vecteur (quelle que soit la nature du vecteur considéré).

```{r echo=T}
length(a1)
length(a2)
```

Chaque élément d'un vecteur est repéré par un indice entre \[\].

```{r echo=T}
a1[1]
a1[3]
# Opérations sur les éléments d'un vecteur
a1[1]+a1[3]
a1[1]/a1[3]
```

On peut changer la valeur de a1\[3\] en lui affectant une nouvelle valeur :

```{r echo=T}
a1[3]<- -3
a1
```

On peut aussi ajouter de nouvelles valeurs aux vecteurs a1

```{r echo=T}
a1[12]<-10
a1[13]<-11
```

## Les calculs de base avec un vecteur

On peut ajouter, soustraire, multiplier des vecteurs entre eux à condition qu'ils soient de même longeur et qu'ils soient numériques.

```{r echo=T}
a1<-seq(10,20,by=1)
a2<-seq(20,30,by=1)
a1+a2
a2-a1
a1*a2
a2/a1
a1^2*log(a2)
```

## Ouvrir l'aide

Toutes les fonctions prédéfinies dans R possèdent une vignette (description des arguments de la fonction, des sorties et un exemple utilisant la fonction). Pour accéder à cette aide on met un point d'interrogation devant le nom de la fonction.

***Exemple : Décrire la fonction sample***

```{r echo=TRUE}
?sample
```

Une fonction comporte plusieurs arguments. Par exemple ***sample(x, size, replace = FALSE, prob = NULL)***

Parmi les arguments, certains sont obligatoires

-   x est un vecteur dans lequel on va choisir des valeurs au hasard.
-   size est la taille du résultat

d'autres sont facultatifs (ils ont des valeurs par défaut) ici replace et prob.

```{r echo=TRUE}
sample(-10:10,1)
sample(-10:10,3)
```

## Un peu de logique

1.  l'opérateur \| correspond à OU : A \| B est faux lorsque les deux événements A et B sont faux simultanément et est vrai dans tous les autres cas.

2.  l'opérateur & correspond à ET : A & B est vrai uniquement lorsque les deux événements A et B sont vrais et est faux dans tous les autres cas.

On définit un vecteur

```{r echo=TRUE}
set.seed("44")
x=sample(-20:20,40,T)
```

On veut savoir combien de valeurs de x sont postives.

```{r echo=TRUE}
sum(x>0)
```

Quelles sont les positions de ces valeurs ?

```{r echo=TRUE}
which(x>0)
```

Quels sont les indices des valeurs supérieure à 5 ou inférieure à 0 ?

```{r echo=T}
which(x>5 | x<0)
```

Quels sont les indices des valeurs dans \[5,10\] ?

```{r echo=T}
which(x>=5 & x<=10)
```

## Exercices

### Exo 1 :

1.  Créer le vecteur x contenant le nom des villes suivantes Nantes, Brest, Rennes, Angers, Le Mans

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
 x<-c("Nantes", "Brest", "Rennes", "Angers","Le Mans")
```

2.  Afficher le premier élément de x

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[1]
```

3.  Afficher tous les éléments de x sauf le premier

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[-1]
```

4.  Afficher les trois premiers éléments de x.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[1:3]
```

5.  Afficher le deuxième et le quatrième élément de x.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[c(2,4)]
```

6.  Classer les éléments de x dans l'ordre alphabétique puis anti-alphabétique grâce aux fonctions sort et rev.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
sort(x)
rev(sort(x))
```

### Exo 2 :

1.  Créer un vecteur $y$ contenant les entiers pairs inférieurs à 100 grâce à la fonction seq.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
y<-seq(2,100,by=2)
```

2.  Ajouter à y les entiers impairs inférieurs à 100. On stockera la valeur obtenue dans une variable $S$.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
z<-seq(1,100,2)
S<-y+z
```

3.  Déterminer la taille du vecteur $S$ final.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
length(x)
```

4.  A l'aide de la fonction rep créer un vecteur sonnette contenant 4 fois « ding » puis 4 fois « dong ».

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
sonette<-c(rep("ding",4),rep("dong",4))
```

5.  A l'aide de la fonction sample créer un vecteur melodie contenant une succession aléatoire de « ding » et de « dong » de taille 100.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
melodie<-sample(c("ding","dong"),100,replace=T)
```

6.  Grâce à la fonction table, déterminer combien il y a de « ding » et combien il y a de « dong » dans melodie.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
table(melodie)
```

### Exo 3 :

1.  Générer un vecteur $x$ de taille 100 de valeurs tirées selon une loi normale centrée réduite (ie de paramètre 0 et 1) grâce à la fonction ***rnorm***.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x<-rnorm(100)
```

2.  Calculer la somme et la moyenne de x à l'aide des fonctions dédiées.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
sum(x)
mean(x)
```

3.  Calculer le minimum, le premier quartile, la médiane, le troisième quartile et le maximum de $x$. La fonction quantile bien utilisée vous donnera toutes ces informations directement...

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"

quantile(x)
```

4.  Générer le vecteur booléen indiquant si les nombres contenus dans $x$ sont positifs (TRUE) ou non (FALSE).

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
y<-(x>0)
```

5.  Même question pour indiquer les nombres sont compris entre -1 et 1.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
(x< -1)|(x>1)
```

6.  Afficher les indices des valeurs négatives de x.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
which(x<0)
```

7.  Afficher la valeur absolue de $x$.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
abs(x)
```

8.  Afficher la partie entière des valeurs de x.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
floor(x)
```

9.  Afficher uniquement les valeurs positives de x.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[x>0]
```

10. Remplacer les valeurs négatives de x par 0. Vérifier le remplacement.

```{r}
#| code-fold: true
#| code-summary: "Voir la correction"
x[x>0]<-0
x
```
