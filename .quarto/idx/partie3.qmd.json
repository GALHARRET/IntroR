{"title":"Instructions conditionnelles :","markdown":{"headingText":"Instructions conditionnelles :","containsRefs":false,"markdown":"\n***if(condition){instruction}*** permet de calculer des instructions uniquement lorsque la condition est vraie.\n\nRegarder l'aide des fonctions runif et paste pour comprendre ce qu'elles retournent.\n\n```{r echo=T}\nx<-runif(1,-10,10)\nif(x>0){print(paste(\"La valeur\",round(x,1),\"est positive\",sep=\" \"))}\n```\n\n***if(condition){instruction1}else{instruction2}*** permet de calculer l'instruction1 lorsque la condition est vraie et l'instruction2 lorsque la condition est fausse.\n\n```{r echo=T}\nx<-runif(1,-10,10)\nif(x>0){\n  print(paste(\"La valeur\",round(x,1),\"est positive\",sep=\" \"))}else{\n  print(paste(\"La valeur\",round(x,1),\"est négative\",sep=\" \"))}\n```\n\n\nOn peut imbriquer plusieurs conditions if. \n\n***Rappel :*** \n\n1. l'opérateur | correspond à OU : A | B est faux lorsque les deux événements A et B sont faux simultanément.\n\n2. l'opérateur & correspond à ET : A & B est vrai uniquement lorsque les deux événements A et B sont vrais.\n\n***Exercice :*** \n\n1. Choisir deux nombres $x,y$ au hasard dans l'intervalle $[0,10]$ \n2. La valeur stockée dans la variable $z$ sera égale à $x+1$ si $x<y$ sinon égale à $x+2$ si $x>5$ et $y>5$ sinon égale à $x$.\n3. Retourner les valeurs de x,y,z. On pourra utiliser la fonction paste(). \n\n```{r}\nx<-runif(1,0,10)\ny<-runif(1,0,10)\nif(x<y){z<-x+1}else if(x>5 & y>5){z<-x+2}else{z<-x} \nprint(paste(\"x=\",x,\"y=\",y,\"z=\",z))\n```\n\n\n\n# Boucle FOR, WHILE :\n\n## FOR\n\n***for (var in seq) {commandes}*** permet de définir un nombre d'itérations dans une séquence.\n\nPar exemple on veut Stocker dans la variable x la somme des entiers de 1 à n où n est fixé par l'utilisateur :\n\n```{r echo=T}\nn<-100\nx<-0\nfor(i in 1:n){x<-x+i}\nprint(x)\n```\n\nMais on peut aussi faire la somme de tous les entiers impairs compris entre 1 et n \n\n```{r}\nn<-100\nx<-0\nimpairs<-seq(1,n,2)\nfor(i in impairs){x<-x+i}\nprint(x)\n```\n\n***Exercice :***\nOn considère deux variables $x,y$ initialisées à 0.\nOn propose le jeu suivant : \n\"à chaque itération on tire un nombre au hasard entre 0 et 1, lorsque ce nombre est supérieur à 0.5 on incrémente la valeur précédente de $y$ de 1, sinon c'est la valeur précédente de $x$ qui est incrémentée de 1.\"\n\nLe joueur gagne si au bout de $n$ itérations $y>x.$\nEcrire le programme pour $n=10.$\n\n```{r}\nn<-10\ny=x=0\nfor(i in 1:n){\na<-runif(1,0,1)\nif(a>0.5){y<-y+1}else{x<-x+1}\n}\nif(y>x){print(\"Gagnant\")}else{print(\"Perdant\")}\n```\n\n\n## WHILE\n\n***while(condition){instruction}*** répète une instruction tant que la condition considérée est vraie. Attention, la condition est évaluée avant toute exécution dans while. \n\n```{r echo=T}\ni<-1\nwhile (i<10){\n   print(i)\n   i=i+1}\n```\n\n\n***Exercice***\n\n1.\tCréer un vecteur nommé vecAlea de 100 valeurs entières entre 1 et 100. On utilisera la fonction ***sample*** avec remise.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nvecAlea<-sample(1:100,100,T)\n```\n\n\na.\tdéterminer le vecteur IND qui contient les indices des valeurs strictement supérieures à 50, (avec une boucle et sans une boucle)\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nIND<-c()\nfor(i in 1:100){ \n  if(vecAlea[i]>50){IND<-c(IND,i)}\n  }\n\nIND<-which(vecAlea>50)\n```\n\nb.\tdéterminer le vecteur VEC contenant ces valeurs.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nVEC<-vecAlea[IND]\n```\n\n2.\tOn calcule le maximum du vecteur vecAlea. Déterminer à l'aide d'une boucle le nombre de fois où ce maximum apparaît dans vecAlea. Retrouver ce nombre sans utiliser de boucle.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nM=max(vecAlea)\nn=0\nfor(i in 1:length(vecAlea)){\n  if(vecAlea[i]==M){n=n+1}\n}\n\nlength(which(vecAlea==M))\n```\n\n\n3.\tCréer le vecteur nommé vecPM5 contenant tous les nombres de 1 à 100 qui ne sont pas des multiples de 5 (avec une boucle puis sans). Penser à la fonction ***floor*** qui calcule la partie entière. \n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nVecPM5<-c()\nfor(i in 1:100){\n if(i/5-floor(i/5)!=0){VecPM5<-c(VecPM5,i)} \n}\n\n```\n\n# Ecrire une fonction en R :\n\nOn veut écrire une fonction qui étant donnée le rayon $r$ d'un cercle permet de calculer son périmètre $P=2\\pi r$, on note cette fonction perim()\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nperim<-function(r){\n  return(2*pi*r)\n}\nperim(1)\n```\n\nOn remarque que dans le langage R il n'est pas nécessaire de donner le type des arguments (entier, carcatère,...) la fonction s'appliquera sauf si le type n'est pas correct \n\n```{r echo=T}\nperim(\"rayon\")\n```\n\n\nOn peut améliorer cette fonction en indiquant à l'utilisateur que la fonction ne sera calculée que lorsque $r>0$ :\n\n```{r echo=T}\nperim<-function(r){\n  if(r>0){return(2*pi*r)}else{return(\"On ne calcule le périmètre que lorsque r>0\")}\n}\nperim(1)\nperim(-1)\n```\n\nPar contre l'erreur reste identique si on applique la fonction périmètre à \"rayon\".\nOn peut également définir des fonctions qui ont plusieurs arguments en entrée et qui peuvent retourner plusieurs valeurs en sortie.\n\nAutre Exemple :\nOn va écrire une fonction restangle() ayant pour arguments L et l qui renvoie le périmètre $P=2\\times(L+l)$ et l'aire $A=L\\times l$ du rectangle.\n\n```{r echo=T}\nrectangle<-function(L,l){\n  P=2*(L+l)\n  A=L*l\n  return(list(Perim=P,Aire=A))\n}\nrectangle(11,10)\n## Que le périmètre :\nrectangle(11,10)$Perim\n```\n\n\n***Exercice :***\n\nCréér une fonction SomEnt() ayant pour argument un nombre entier n et qui retourne la somme des entiers inférieurs à n.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\nSomEnt<-function(n){\n  x<-0\n  for(i in 1:n) x<-x+i\n  return(x)\n}\n```\n\n\n\n# Exercices :\n\n## Exercice 1 (Droite des moindres carrés)\n\nOn va écrire une fonction R qui permet de déterminer la droite des moindres carrées ordinaires. Vous verrez (ultérieurment en stat) que pour un nuage de points $(x_i,y_i)_{i=1,...,n}$ la droite la plus proche (au sens des moindres carées) de ce nuage a pour pente $b=\\frac{\\frac{1}{n}\\sum{x_i y_i}-\\bar x\\bar y}{\\frac{1}{n}\\sum x_i^2-\\bar x}$ et pour ordonnée à l'origine $a=\\bar y -b \\bar x.$\n\nCréer une fonction nommée droite() ayant pour arguments deux vecteurs x,y et qui calcule le coefficient directeur de la droite et son ordonnée à l'origine. \n\n```{r eval=T}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\ndroite<-function(x,y){\n  b<-(mean(x*y)-mean(x)*mean(y))/(mean((x-mean(x))^2))\n  a<-mean(y)-b*mean(x)\n  return(list(a=a,b=b))\n}\n```\n\n\n## Exercice 2 : Boucles et graphiques\n\nReprendre la base de données iris :\n\n```{r echo=T}\ndata(\"iris\")\n```\n\n\n1. Utiliser une boucle de manière à faire une boîte à moustaches par variable quantitative `r colnames(iris)[1:4]` selon l’espèce `r colnames(iris)[5]`.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\npar(mfrow=c(1,1))\nfor(i in 1:4){\n  boxplot(iris[,i]~iris$Species,\n          ylab=colnames(iris)[i],\n          xlab=\"Espèces\")\n  abline(h=mean(iris[,i]),col=2,lty=2,lwd=2)\n}\n```\n\n\n2. Utiliser une boucle de reproduire le graphique suivant (on pensera à utiliser la fonction ***abline*** pour ajouter la droite des moindres carrés):\n\n```{r echo=F, eval=T,fig.height=5,fig.width=10,fig.align='center',fig.cap=\"Trois graphes différents\"}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\n\npar(mfrow=c(1,3))\nfor(i in 1:3){\n    esp<-levels(iris$Species)[i]\n    D<-droite(iris$Sepal.Length[iris$Species==esp],iris$Sepal.Width[iris$Species==esp])\n    plot(iris$Sepal.Length[iris$Species==esp],iris$Sepal.Width[iris$Species==esp],\n         main=paste(\"Pour l'espèce\",esp),xlab=\"L Sépale\",ylab=\"l Sépale\",pch=20)\n    abline(a=D$a,b=D$b,col=2,lty=2,lwd=2)\n    text(min(iris$Sepal.Length[iris$Species==esp])+1,\n         max(iris$Sepal.Width[iris$Species==esp]),\n         paste(\"y=\",round(D$a,1),\"+\",round(D$b,1),\"*x\",sep=\"\"),col=2,cex=0.75)\n  \n}\n```\n\n\n\n\n\n3. Maintenant on fait les trois graphes sur le même environnement graphique, on pensera à faire un plot() sans points type=\"n\".\n\n\n```{r eval=T,fig.align='center', fig.cap=\"Trois graphes dans le même environnement\"}\n\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\n\npar(mfrow=c(1,1))\n\nplot(iris$Sepal.Length,iris$Sepal.Width,\n     xlab=\"L (cm)\",\n     ylab=\"l (cm)\",\n     type=\"n\"\n     )\ncouleur<-c(\"purple\",\"pink\",\"blue\")\nPoints<-c(20,17,18)\nfor(i in 1:3){\n  I<-which(iris$Species==levels(iris$Species)[i])\n  points(iris$Sepal.Length[I],iris$Sepal.Width[I],\n       pch=Points[i],cex=.5,col=couleur[i])\n  par<-droite(iris$Sepal.Length[I],\n              iris$Sepal.Width[I])\n  abline(a=par$a,b=par$b,\n         col=couleur[i],lty=2,lwd=1.5)\n}\n\nlegend(\"topright\",levels(iris$Species),\n       col=couleur,\n       pch=Points,\n       cex=.5)\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"partie3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}