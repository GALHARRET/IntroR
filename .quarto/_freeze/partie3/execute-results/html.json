{
  "hash": "adcfb3b8a2217110a590f731ad82652a",
  "result": {
    "markdown": "# Instructions conditionnelles :\n\n***if(condition){instruction}*** permet de calculer des instructions uniquement lorsque la condition est vraie.\n\nRegarder l'aide des fonctions runif et paste pour comprendre ce qu'elles retournent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-runif(1,-10,10)\nif(x>0){print(paste(\"La valeur\",round(x,1),\"est positive\",sep=\" \"))}\n```\n:::\n\n\n***if(condition){instruction1}else{instruction2}*** permet de calculer l'instruction1 lorsque la condition est vraie et l'instruction2 lorsque la condition est fausse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-runif(1,-10,10)\nif(x>0){\n  print(paste(\"La valeur\",round(x,1),\"est positive\",sep=\" \"))}else{\n  print(paste(\"La valeur\",round(x,1),\"est négative\",sep=\" \"))}\n```\n:::\n\n\n\nOn peut imbriquer plusieurs conditions if. \n\n***Rappel :*** \n\n1. l'opérateur | correspond à OU : A | B est faux lorsque les deux événements A et B sont faux simultanément.\n\n2. l'opérateur & correspond à ET : A & B est vrai uniquement lorsque les deux événements A et B sont vrais.\n\n***Exercice :*** \n\n1. Choisir deux nombres $x,y$ au hasard dans l'intervalle $[0,10]$ \n2. La valeur stockée dans la variable $z$ sera égale à $x+1$ si $x<y$ sinon égale à $x+2$ si $x>5$ et $y>5$ sinon égale à $x$.\n3. Retourner les valeurs de x,y,z. On pourra utiliser la fonction paste(). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-runif(1,0,10)\ny<-runif(1,0,10)\nif(x<y){z<-x+1}else if(x>5 & y>5){z<-x+2}else{z<-x} \nprint(paste(\"x=\",x,\"y=\",y,\"z=\",z))\n```\n:::\n\n\n\n\n# Boucle FOR, WHILE :\n\n## FOR\n\n***for (var in seq) {commandes}*** permet de définir un nombre d'itérations dans une séquence.\n\nPar exemple on veut Stocker dans la variable x la somme des entiers de 1 à n où n est fixé par l'utilisateur :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn<-100\nx<-0\nfor(i in 1:n){x<-x+i}\nprint(x)\n```\n:::\n\n\nMais on peut aussi faire la somme de tous les entiers impairs compris entre 1 et n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn<-100\nx<-0\nimpairs<-seq(1,n,2)\nfor(i in impairs){x<-x+i}\nprint(x)\n```\n:::\n\n\n***Exercice :***\nOn considère deux variables $x,y$ initialisées à 0.\nOn propose le jeu suivant : \n\"à chaque itération on tire un nombre au hasard entre 0 et 1, lorsque ce nombre est supérieur à 0.5 on incrémente la valeur précédente de $y$ de 1, sinon c'est la valeur précédente de $x$ qui est incrémentée de 1.\"\n\nLe joueur gagne si au bout de $n$ itérations $y>x.$\nEcrire le programme pour $n=10.$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn<-10\ny=x=0\nfor(i in 1:n){\na<-runif(1,0,1)\nif(a>0.5){y<-y+1}else{x<-x+1}\n}\nif(y>x){print(\"Gagnant\")}else{print(\"Perdant\")}\n```\n:::\n\n\n\n## WHILE\n\n***while(condition){instruction}*** répète une instruction tant que la condition considérée est vraie. Attention, la condition est évaluée avant toute exécution dans while. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ni<-1\nwhile (i<10){\n   print(i)\n   i=i+1}\n```\n:::\n\n\n\n***Exercice***\n\n1.\tCréer un vecteur nommé vecAlea de 100 valeurs entières entre 1 et 100. On utilisera la fonction ***sample*** avec remise.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nvecAlea<-sample(1:100,100,T)\n```\n:::\n\n\n\na.\tdéterminer le vecteur IND qui contient les indices des valeurs strictement supérieures à 50, (avec une boucle et sans une boucle)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nIND<-c()\nfor(i in 1:100){ \n  if(vecAlea[i]>50){IND<-c(IND,i)}\n  }\n\nIND<-which(vecAlea>50)\n```\n:::\n\n\nb.\tdéterminer le vecteur VEC contenant ces valeurs.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nVEC<-vecAlea[IND]\n```\n:::\n\n\n2.\tOn calcule le maximum du vecteur vecAlea. Déterminer à l'aide d'une boucle le nombre de fois où ce maximum apparaît dans vecAlea. Retrouver ce nombre sans utiliser de boucle.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nM=max(vecAlea)\nn=0\nfor(i in 1:length(vecAlea)){\n  if(vecAlea[i]==M){n=n+1}\n}\n\nlength(which(vecAlea==M))\n```\n:::\n\n\n\n3.\tCréer le vecteur nommé vecPM5 contenant tous les nombres de 1 à 100 qui ne sont pas des multiples de 5 (avec une boucle puis sans). Penser à la fonction ***floor*** qui calcule la partie entière. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nVecPM5<-c()\nfor(i in 1:100){\n if(i/5-floor(i/5)!=0){VecPM5<-c(VecPM5,i)} \n}\n```\n:::\n\n\n# Ecrire une fonction en R :\n\nOn veut écrire une fonction qui étant donnée le rayon $r$ d'un cercle permet de calculer son périmètre $P=2\\pi r$, on note cette fonction perim()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nperim<-function(r){\n  return(2*pi*r)\n}\nperim(1)\n```\n:::\n\n\nOn remarque que dans le langage R il n'est pas nécessaire de donner le type des arguments (entier, carcatère,...) la fonction s'appliquera sauf si le type n'est pas correct \n\n\n::: {.cell}\n\n```{.r .cell-code}\nperim(\"rayon\")\n```\n:::\n\n\n\nOn peut améliorer cette fonction en indiquant à l'utilisateur que la fonction ne sera calculée que lorsque $r>0$ :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperim<-function(r){\n  if(r>0){return(2*pi*r)}else{return(\"On ne calcule le périmètre que lorsque r>0\")}\n}\nperim(1)\nperim(-1)\n```\n:::\n\n\nPar contre l'erreur reste identique si on applique la fonction périmètre à \"rayon\".\nOn peut également définir des fonctions qui ont plusieurs arguments en entrée et qui peuvent retourner plusieurs valeurs en sortie.\n\nAutre Exemple :\nOn va écrire une fonction restangle() ayant pour arguments L et l qui renvoie le périmètre $P=2\\times(L+l)$ et l'aire $A=L\\times l$ du rectangle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrectangle<-function(L,l){\n  P=2*(L+l)\n  A=L*l\n  return(list(Perim=P,Aire=A))\n}\nrectangle(11,10)\n## Que le périmètre :\nrectangle(11,10)$Perim\n```\n:::\n\n\n\n***Exercice :***\n\nCréér une fonction SomEnt() ayant pour argument un nombre entier n et qui retourne la somme des entiers inférieurs à n.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\nSomEnt<-function(n){\n  x<-0\n  for(i in 1:n) x<-x+i\n  return(x)\n}\n```\n:::\n\n\n\n\n# Exercices :\n\n## Exercice 1 (Droite des moindres carrés)\n\nOn va écrire une fonction R qui permet de déterminer la droite des moindres carrées ordinaires. Vous verrez (ultérieurment en stat) que pour un nuage de points $(x_i,y_i)_{i=1,...,n}$ la droite la plus proche (au sens des moindres carées) de ce nuage a pour pente $b=\\frac{\\frac{1}{n}\\sum{x_i y_i}-\\bar x\\bar y}{\\frac{1}{n}\\sum x_i^2-\\bar x}$ et pour ordonnée à l'origine $a=\\bar y -b \\bar x.$\n\nCréer une fonction nommée droite() ayant pour arguments deux vecteurs x,y et qui calcule le coefficient directeur de la droite et son ordonnée à l'origine. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\ndroite<-function(x,y){\n  b<-(mean(x*y)-mean(x)*mean(y))/(mean((x-mean(x))^2))\n  a<-mean(y)-b*mean(x)\n  return(list(a=a,b=b))\n}\n```\n:::\n\n\n\n## Exercice 2 : Boucles et graphiques\n\nReprendre la base de données iris :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"iris\")\n```\n:::\n\n\n\n1. Utiliser une boucle de manière à faire une boîte à moustaches par variable quantitative Sepal.Length, Sepal.Width, Petal.Length, Petal.Width selon l’espèce Species.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Voir la correction\"}\npar(mfrow=c(1,1))\nfor(i in 1:4){\n  boxplot(iris[,i]~iris$Species,\n          ylab=colnames(iris)[i],\n          xlab=\"Espèces\")\n  abline(h=mean(iris[,i]),col=2,lty=2,lwd=2)\n}\n```\n:::\n\n\n\n2. Utiliser une boucle de reproduire le graphique suivant (on pensera à utiliser la fonction ***abline*** pour ajouter la droite des moindres carrés):\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Trois graphes différents](partie3_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n\n\n3. Maintenant on fait les trois graphes sur le même environnement graphique, on pensera à faire un plot() sans points type=\"n\".\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#| code-fold: true\n#| code-summary: \"Voir la correction\"\n\npar(mfrow=c(1,1))\n\nplot(iris$Sepal.Length,iris$Sepal.Width,\n     xlab=\"L (cm)\",\n     ylab=\"l (cm)\",\n     type=\"n\"\n     )\ncouleur<-c(\"purple\",\"pink\",\"blue\")\nPoints<-c(20,17,18)\nfor(i in 1:3){\n  I<-which(iris$Species==levels(iris$Species)[i])\n  points(iris$Sepal.Length[I],iris$Sepal.Width[I],\n       pch=Points[i],cex=.5,col=couleur[i])\n  par<-droite(iris$Sepal.Length[I],\n              iris$Sepal.Width[I])\n  abline(a=par$a,b=par$b,\n         col=couleur[i],lty=2,lwd=1.5)\n}\n\nlegend(\"topright\",levels(iris$Species),\n       col=couleur,\n       pch=Points,\n       cex=.5)\n```\n\n::: {.cell-output-display}\n![Trois graphes dans le même environnement](partie3_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [
      "partie3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}